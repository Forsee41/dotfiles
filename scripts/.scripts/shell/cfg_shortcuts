#!/bin/bash

HELP_MESSAGE="
A script for a quick config files access. Takes 1st argument as a config shortcut,
2nd (optional) argument as a config subcategory
Uses your \$EDITOR as an editor, or nvim if \$EDITOR is not set

Possible flags:
	-e  |  --executable			Specify executable, takes executable name as an argument
 	-s  |  --show				Show filepath, instead of opening it
 	-h  |  --help				Show help message
	-c  |  --cd 				Run a command from file's dir
"

DEFAULT_EDITOR="nvim"
if [[ ! -z $EDITOR ]]; then EXECUTABLE=$EDITOR; else EXECUTABLE=$DEFAULT_EDITOR; fi

CONFIG_CATEGORY=''
CONFIG_SUBCATEGORY=''
SHOW_FILEPATH=false
RUN_FROM_FILES_DIR=false
DIRNAME=false

while [[ $# -gt 0 ]]; do
	case $1 in
		'-e'|'--executable')
			if [[ ! -z $2 ]]; then
				EXECUTABLE=$2
				shift
				shift;
			else 
				echo "--executable flag requires an executable name argument"
				exit 1;
			fi;;
		'-s'|'--show')
			shift
			SHOW_FILEPATH=true;;
		'-c'|'--cd')
			shift
			RUN_FROM_FILES_DIR=true;;
		'-h'|'--help')
			shift
			echo "$HELP_MESSAGE";;
		*)
			if [[ -z $CONFIG_CATEGORY ]]; then
				CONFIG_CATEGORY=$1
				shift;
			elif [[ -z $CONFIG_SUBCATEGORY ]]; then
				CONFIG_SUBCATEGORY=$1
				shift;
			else 
				echo "Too many arguments!!!"
				exit 1;
			fi;;
	esac
done
	
case $CONFIG_CATEGORY in 
	'') echo "Config shortcut required";;
	'zsh') 
	  case $CONFIG_SUBCATEGORY in 
		'zshrc') TARGET_FILE_PATH=$HOME/.zshrc;;
		'show') ls $HOME/.config/zshrc;;
		'') TARGET_FILE_PATH=$HOME/.config/zshrc;;
		*)
		  INNER_CONFIG_FILENAME=$HOME/.config/zshrc/$CONFIG_SUBCATEGORY.sh
		  echo $INNER_CONFIG_FILENAME
		  if [[ -f $INNER_CONFIG_FILENAME ]]; then
			TARGET_FILE_PATH=$INNER_CONFIG_FILENAME
		  else
			echo "Config category $2 is not found"
		  fi;;
	  esac;;
	'zprof') TARGET_FILE_PATH=$HOME/.zprofile;;
	'zath'|'zathura'|'zathurarc') TARGET_FILE_PATH=$HOME/.config/zathura/zathurarc;;
	'ala') TARGET_FILE_PATH=$HOME/.alacritty.yml;;
	'rofi') TARGET_FILE_PATH=$HOME/.config/rofi/config.rasi;;
	'rofid') TARGET_FILE_PATH=$HOME/.config/rofi/;;
	'zshrc') TARGET_FILE_PATH=$HOME/.zshrc;;
	'i3') TARGET_FILE_PATH=$HOME/.config/i3/config;;
	'xinit') TARGET_FILE_PATH=$HOME/.xinitrc;;
	'dmrc'|'dm') TARGET_FILE_PATH=$HOME/.dmrc;;
	'bash') TARGET_FILE_PATH=$HOME/.bashrc;;
	'vim') TARGET_FILE_PATH=$HOME/.vimrc;;
	'sxhkd'|'xshkd'|'keys'|'keybindings') TARGET_FILE_PATH=$HOME/.config/sxhkd/sxhkdrc;;
	'picom') TARGET_FILE_PATH=$HOME/.config/picom/picom.conf;;
	'polybar'|'bar') TARGET_FILE_PATH=$HOME/.config/polybar/config.ini;;
	'qtile') TARGET_FILE_PATH=$HOME/.config/qtile/config.py;;
	'cfg'|'con') TARGET_FILE_PATH=$HOME/.scripts/shell/cfg_shortcuts;;
	'nvim') 
		case $CONFIG_SUBCATEGORY in 
		'init'|'') TARGET_FILE_PATH=$HOME/.config/nvim/init.lua;;
		'show') ls $HOME/.config/nvim/lua/user;;
		'lsp') TARGET_FILE_PATH=$HOME/.config/nvim/lua/user/lsp/init.lua;DIRNAME=$HOME/.config/nvim/lua/user/lsp;;
		*)
		  INNER_CONFIG_FILENAME=$HOME/.config/nvim/lua/user/$CONFIG_SUBCATEGORY.lua
		  if [[ -f $INNER_CONFIG_FILENAME ]]; then
			TARGET_FILE_PATH=$INNER_CONFIG_FILENAME
		  else
			echo "Config category $CONFIG_SUBCATEGORY is not found"
		  fi;;
		esac;;
	*) echo "Config shortcut not found";;
esac

if [[ $SHOW_FILEPATH == true ]]; 
	then echo "$TARGET_FILE_PATH"; exit 0;
elif [[ ! -z $TARGET_FILE_PATH && $RUN_FROM_FILES_DIR == true ]]; 
	if [[ $DIRNAME == false ]]; then DIRNAME=$(dirname $TARGET_FILE_PATH);fi;
	then (cd $DIRNAME && exec $EXECUTABLE $TARGET_FILE_PATH);
elif [[ ! -z $TARGET_FILE_PATH ]]; 
	then exec $EXECUTABLE $TARGET_FILE_PATH; fi

